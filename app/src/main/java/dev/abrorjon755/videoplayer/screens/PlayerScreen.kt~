@file:Suppress("DEPRECATION")

package dev.abrorjon755.videoplayer.screens

import android.annotation.SuppressLint
import android.app.PictureInPictureParams
import android.content.Context
import android.content.Intent
import android.content.pm.ActivityInfo
import android.content.res.Configuration
import android.net.Uri
import android.os.Build
import android.view.ViewGroup
import android.widget.FrameLayout
import androidx.activity.compose.BackHandler
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.OptIn
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.gestures.detectTapGestures
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.ExitToApp
import androidx.compose.material.icons.automirrored.rounded.KeyboardArrowLeft
import androidx.compose.material.icons.automirrored.rounded.KeyboardArrowRight
import androidx.compose.material.icons.outlined.Lock
import androidx.compose.material.icons.rounded.Close
import androidx.compose.material.icons.rounded.Favorite
import androidx.compose.material.icons.rounded.FavoriteBorder
import androidx.compose.material.icons.rounded.Lock
import androidx.compose.material.icons.rounded.MoreVert
import androidx.compose.material.icons.rounded.PlayArrow
import androidx.compose.material.icons.rounded.Refresh
import androidx.compose.material.icons.rounded.Share
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Slider
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableDoubleStateOf
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableLongStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalConfiguration
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.media3.common.C
import androidx.media3.common.MediaItem
import androidx.media3.common.Player
import androidx.media3.common.util.UnstableApi
import androidx.media3.exoplayer.ExoPlayer
import androidx.media3.exoplayer.SeekParameters
import androidx.media3.ui.AspectRatioFrameLayout
import androidx.media3.ui.PlayerView
import dev.abrorjon755.videoplayer.composables.MyButton
import dev.abrorjon755.videoplayer.composables.TimeCalculator
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@SuppressLint("SourceLockedOrientationActivity")
@OptIn(UnstableApi::class)
@Composable
fun PlayerScreen(url: String, modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val configuration = LocalConfiguration.current
    val activity = context.findActivity()

    var playbackPosition by rememberSaveable { mutableLongStateOf(0L) }
    val exoPlayer = remember {
        ExoPlayer.Builder(context).build().apply {
            setMediaItem(MediaItem.fromUri(Uri.parse(url)))
            seekTo(playbackPosition)
            prepare()
            videoScalingMode = C.VIDEO_SCALING_MODE_SCALE_TO_FIT
            playWhenReady = true
            setSeekParameters(
                SeekParameters(1000, 1000)
            )
        }
    }

    var playing by rememberSaveable { mutableStateOf(exoPlayer.isPlaying) }
    var seconds by rememberSaveable { mutableIntStateOf(0) }
    var currentSeconds by rememberSaveable { mutableIntStateOf(0) }
    var showController by rememberSaveable { mutableStateOf(true) }
    val coroutineScope = rememberCoroutineScope()
    var debounceJob by remember { mutableStateOf<Job?>(null) }
    var isLiked by rememberSaveable { mutableStateOf(false) }
    val shareLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult()
    ) {}
    var isLocked by rememberSaveable { mutableStateOf(false) }
    var currentSpeed by rememberSaveable { mutableDoubleStateOf(1.0) }

    activity?.window?.let {
        it.statusBarColor = Color.Black.toArgb()
        it.navigationBarColor = Color.Black.toArgb()
    }
    // When Landscape change Full Screen
    LaunchedEffect(!showController) {
        val windowInsetsController =
            activity?.let {
                WindowCompat.getInsetsController(
                    it.window,
                    activity.window.decorView
                )
            }
        if (!showController) {
            windowInsetsController?.hide(WindowInsetsCompat.Type.systemBars())
            if (windowInsetsController != null) {
                windowInsetsController.systemBarsBehavior =
                    WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
            }
        } else if (!isLocked) {
            windowInsetsController?.show(WindowInsetsCompat.Type.systemBars())
        }
    }

    fun hideController() {
        showController = !showController
        debounceJob?.cancel()
        debounceJob = coroutineScope.launch {
            delay(5000L)
            showController = !exoPlayer.isPlaying
        }
    }

    LaunchedEffect(exoPlayer) {
        while (true) {
            currentSeconds = exoPlayer.currentPosition.toInt()
            delay(100)
        }
    }

    exoPlayer.addListener(object : Player.Listener {
        override fun onPlaybackStateChanged(state: Int) {
            super.onPlaybackStateChanged(state)
            if (state == Player.STATE_ENDED) {
                exoPlayer.seekTo(0L)
                exoPlayer.playWhenReady = false
            }
            if (state == Player.STATE_READY) {
                seconds = exoPlayer.duration.toInt()
                hideController()
            }
        }

        override fun onIsPlayingChanged(isPlaying: Boolean) {
            super.onIsPlayingChanged(isPlaying)
            playing = isPlaying
            currentSeconds = exoPlayer.currentPosition.toInt()
            coroutineScope.launch {
                delay(5000L)
                showController = !exoPlayer.isPlaying
            }
        }
    })

    DisposableEffect(Unit) {
        onDispose {
            playbackPosition = exoPlayer.currentPosition
            exoPlayer.release()
        }
    }

    val lifecycleOwner = LocalLifecycleOwner.current
    DisposableEffect(lifecycleOwner) {
        val observer = LifecycleEventObserver { _, event ->
            when (event) {
                Lifecycle.Event.ON_STOP -> {
                    playbackPosition = exoPlayer.currentPosition
                    exoPlayer.playWhenReady = false
                }

                Lifecycle.Event.ON_START -> {
                    exoPlayer.seekTo(playbackPosition)
                    exoPlayer.playWhenReady = true
                }

                else -> {}
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)
        onDispose { lifecycleOwner.lifecycle.removeObserver(observer) }
    }

    AndroidView(
        factory = { ctx ->
            PlayerView(ctx).apply {
                player = exoPlayer
                resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT
                layoutParams = FrameLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT
                )
                useController = false
            }
        },
        modifier = modifier
            .fillMaxSize()
            .background(color = Color.Black),
    )

    if (!isLocked) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectTapGestures(
                        onDoubleTap = {
                            if (exoPlayer.isPlaying) {
                                exoPlayer.pause()
                            } else {
                                exoPlayer.play()
                            }
                            hideController()
                        },
                        onTap = { hideController() },
                    )
                }
                .pointerInput(Unit) {
                    detectDragGestures { change, dragAmount ->
                        change.consume()
                        when {
                            dragAmount.x > 50 -> {
                                exoPlayer.seekForward()
                            }

                            dragAmount.x < -50 -> {
                                exoPlayer.seekBack()
                            }
                        }
                    }
                }
                .padding(horizontal = 25.dp),
        ) {
            BackHandler { exoPlayer.release() }
            Spacer(modifier = Modifier.weight(1f))
            AnimatedVisibility(visible = showController) {
                Column {
                    Spacer(modifier = Modifier.height(50.dp))
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                    ) {
                        Text(
                            text = exoPlayer.mediaMetadata.displayTitle.toString(),
                            style = MaterialTheme.typography.titleLarge,
                            color = Color.White,
                        )
                        Spacer(modifier = Modifier.weight(1f))
                        MyButton(
                            size = 40.dp,
                            func = {
                                val sendIntent = Intent().apply {
                                    action = Intent.ACTION_SEND
                                    putExtra(Intent.EXTRA_TEXT, url) // Text to share
                                    type = "text/plain" // MIME type for sharing text
                                }

                                val shareIntent = Intent.createChooser(sendIntent, null)
                                shareLauncher.launch(shareIntent)
                            },
                            icon = Icons.Rounded.Share,
                            hideRipple = false,
                            modifier = Modifier.clip(RoundedCornerShape(40.dp)),
                        )
                        Spacer(modifier = Modifier.width(10.dp))
                        MyButton(
                            size = 40.dp,
                            func = {},
                            icon = Icons.Rounded.MoreVert,
                            hideRipple = false,
                            modifier = Modifier.clip(RoundedCornerShape(40.dp)),
                        )
                    }
                    Spacer(modifier = Modifier.weight(1f))
                    Row(
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth(),
                    ) {
                        MyButton(
                            size = 50.dp,
                            func = { exoPlayer.seekBack() },
                            icon = Icons.AutoMirrored.Rounded.KeyboardArrowLeft
                        )
                        Spacer(modifier = Modifier.width(20.dp))
                        MyButton(
                            size = 70.dp,
                            func = {
                                if (exoPlayer.isPlaying) {
                                    exoPlayer.pause()
                                } else {
                                    exoPlayer.play()
                                }
                            },
                            icon = if (!playing) Icons.Rounded.PlayArrow else Icons.Rounded.Close,
                        )
                        Spacer(modifier = Modifier.width(20.dp))
                        MyButton(
                            size = 50.dp,
                            func = { exoPlayer.seekForward() },
                            icon = Icons.AutoMirrored.Rounded.KeyboardArrowRight
                        )
                    }
                    Spacer(modifier = Modifier.weight(1f))
                    Row(
                        horizontalArrangement = Arrangement.SpaceBetween,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 10.dp),
                    ) {
                        TimeCalculator(currentSeconds)
                        TimeCalculator(seconds)
                    }
                    Slider(
                        value = currentSeconds.toFloat(),
                        onValueChange = { exoPlayer.seekTo(it.toLong()) },
                        valueRange = if (seconds.toFloat() > 0f) 0f..seconds.toFloat()
                        else 0f..1f,
                        enabled = seconds.toFloat() > 0f,
                        onValueChangeFinished = { exoPlayer.playWhenReady = true },
                        modifier = Modifier.fillMaxWidth(),
                    )
                    Spacer(modifier = Modifier.height(20.dp))
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.SpaceAround,
                        modifier = Modifier.fillMaxWidth(),
                    ) {
                        MyButton(
                            size = 40.dp,
                            func = { isLiked = !isLiked },
                            icon = if (isLiked) Icons.Rounded.Favorite else Icons.Rounded.FavoriteBorder,
                        )
                        MyButton(
                            size = 40.dp,
                            func = { enterPiPMode(activity) },
                            icon = Icons.AutoMirrored.Rounded.ExitToApp,
                        )
                        Text(
                            text = "${currentSpeed}x",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.Bold,
                            color = Color.White,
                            modifier = Modifier
                                .size(40.dp)
                                .background(
                                    color = Color.Black.copy(alpha = 0.5f),
                                    shape = RoundedCornerShape(40.dp)
                                )
                                .clip(RoundedCornerShape(40.dp))
                                .pointerInput(Unit) {
                                    detectTapGestures(
                                        onTap = {
                                            if (currentSpeed != 2.0) {
                                                currentSpeed += 0.25
                                                exoPlayer.setPlaybackSpeed(currentSpeed.toFloat())
                                            } else {
                                                currentSpeed = 0.5
                                                exoPlayer.setPlaybackSpeed(currentSpeed.toFloat())
                                            }
                                        }
                                    )
                                }
                                .padding(start = 5.dp, top = 10.dp)
                        )
                        MyButton(
                            size = 40.dp,
                            func = {
                                when (configuration.orientation) {
                                    Configuration.ORIENTATION_LANDSCAPE -> {
                                        activity?.requestedOrientation =
                                            ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
                                        activity?.requestedOrientation =
                                            ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED
                                    }

                                    Configuration.ORIENTATION_PORTRAIT -> activity?.requestedOrientation =
                                        ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE

                                    else -> activity?.requestedOrientation =
                                        ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED

                                }
                            },
                            icon = Icons.Rounded.Refresh,
                        )
                        MyButton(
                            size = 40.dp,
                            func = { isLocked = !isLocked },
                            icon = Icons.Rounded.Lock
                        )
                    }
                    Spacer(modifier = Modifier.height(30.dp))
                }
            }
        }
    } else {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectTapGestures(onTap = { hideController() })
                }
                .padding(horizontal = 40.dp),
        ) {
            BackHandler { }
            Spacer(modifier = Modifier.weight(1f))
            AnimatedVisibility(visible = showController) {
                Column {
                    Spacer(modifier = Modifier.weight(1f))
                    Row(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Spacer(modifier = Modifier.weight(1f))
                        MyButton(
                            size = 40.dp,
                            func = { isLocked = !isLocked },
                            icon = Icons.Outlined.Lock
                        )
                    }
                    Spacer(modifier = Modifier.height(30.dp))
                }
            }
        }
    }
}


fun Context.findActivity(): android.app.Activity? {
    var context = this
    while (context is android.content.ContextWrapper) {
        if (context is android.app.Activity) return context
        context = context.baseContext
    }
    return null
}

fun enterPiPMode(activity: android.app.Activity?) {
    activity?.let {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val params = PictureInPictureParams.Builder()
                .build()
            it.enterPictureInPictureMode(params)
        }
    }
}